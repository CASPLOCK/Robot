// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.subsystems;

import org.usfirst.frc.team1701.robot.RobotMap;
import org.usfirst.frc.team1701.robot.commands.*;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController left_1 = RobotMap.driveTrainLeft_1;
    private final SpeedController left_2 = RobotMap.driveTrainLeft_2;
    private final SpeedController right_1 = RobotMap.driveTrainRight_1;
    private final SpeedController right_2 = RobotMap.driveTrainRight_2;
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void leftDriveControl(double inputSpeed) {
		/*
		 * two motors are used to control one wheel per side (total 4 motors), so they have
		 * to have the same input
		 */
		left_1.set(inputSpeed);
		left_2.set(inputSpeed);

	}

	public void rightDriveControl(double inputSpeed) {
		/*
		 * two motors are used to control one wheel per side (total 4 motors), so they have
		 * to have the same input
		 */
		right_1.set(inputSpeed);
		right_2.set(inputSpeed);
	}

	public void teleopControl(double forwardsBackwardsAxis, double turningAxis) {
		double rightInput = forwardsBackwardsAxis; 
		double leftInput = forwardsBackwardsAxis;

		leftInput += turningAxis;
		rightInput -= turningAxis;
		
		if (leftInput > 1) {
			rightInput -= leftInput - 1;
			leftInput -= leftInput - 1;
		} else if (leftInput < -1) {
			rightInput += leftInput + 1;
			leftInput += leftInput + 1;
		}
		if (rightInput > 1) {
			leftInput -= rightInput - 1;
			rightInput -= rightInput - 1;
		} else if (rightInput < -1) {
			leftInput += rightInput + 1;
			rightInput += rightInput + 1;
		}
		leftDriveControl(leftInput);
		rightDriveControl(rightInput);

	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
}
