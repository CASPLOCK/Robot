// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.subsystems;

import org.usfirst.frc.team1701.robot.RobotMap;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class GearArm extends Subsystem {
	private double highestReading = 0;
	private double highestSample = 0;
	private int samples = 0;
	private boolean hasAverage = false;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogInput gearDistanceSensor = RobotMap.gearArmGearDistanceSensor;
    private final DoubleSolenoid gearPusher = RobotMap.gearArmGearPusher;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void pushGear() {
		gearPusher.set(DoubleSolenoid.Value.kForward);
	}

	public void retractGear() {
		gearPusher.set(DoubleSolenoid.Value.kReverse);
	}

	public double getGearDistance() {
		if (samples < 15) { // returns the highest value of every 15 samples.
			samples++;
			double distance = gearDistanceSensor.getVoltage() * 100 * .394 + 2;
			if (distance > highestSample) {
				highestSample = distance;
			}
		} else {
			samples = 0;
			highestReading = highestSample;
			highestSample = gearDistanceSensor.getVoltage() * 100 * .394 + 2;
			hasAverage = true;
		}
		if (!hasAverage) {
			return gearDistanceSensor.getVoltage() * 100 * .394 + 2; // in
																		// inches
		} else {
			return highestReading;
		}
		// gearDistanceSensor.
	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
}
