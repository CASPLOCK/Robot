// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.commands;

import org.usfirst.frc.team1701.robot.Robot;
import org.usfirst.frc.team1701.robot.RobotMap;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AutonomousCommand extends Command {
	private final double DRIVE_FORWARD_DISTANCE = 105.0; // enough to cross the
														// baseline (tested to be 95)
	private final double AUTO_DRIVE_SPEED = .4;
	private final double AUTO_TURN_SPEED = .3;
	private boolean isFinished = false;
	private int currentState;
	private NetworkTable visionTable;
	private boolean turnLeft = false;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutonomousCommand() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.driveTrain.resetLeftEncoder();
		Robot.driveTrain.resetRightEncoder();
		currentState = 1;
		NetworkTable.setTeam(1701);
		visionTable = NetworkTable.getTable("vision");
		RobotMap.navx.reset();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
        Robot.lights.getTargetingLED().set(Relay.Value.kOn);

		boolean gearTargetFound = false;
		try {
			gearTargetFound = visionTable.getBoolean("gearTargetFound", false);
		} catch (Exception e) {
			;
		}
		SmartDashboard.putNumber("Current State", currentState);
		SmartDashboard.putNumber("Left Encoder Reading: ", Robot.driveTrain.getLeftDistance());
		SmartDashboard.putNumber("Right Encoder Reading: ", Robot.driveTrain.getRightDistance());
		SmartDashboard.putNumber("Navx Reading: ", RobotMap.navx.getYaw());


		switch (currentState) {
		case 0: // DONE
			isFinished = true;
			break;
		case 1: // DRIVING_FORWARD
			if (Robot.driveTrain.getLeftDistance() < DRIVE_FORWARD_DISTANCE
					&& Robot.driveTrain.getRightDistance() < DRIVE_FORWARD_DISTANCE) {
				driveForward();
			} else {
				RobotMap.navx.reset();
				currentState++;
			}
			break;
		case 2: // TURNING AROUND
			if (RobotMap.navx.getYaw() < 170 && RobotMap.navx.getYaw() > -170) {
				Robot.driveTrain.leftDriveControl(AUTO_TURN_SPEED);
				Robot.driveTrain.rightDriveControl(AUTO_TURN_SPEED);
			} else {
				RobotMap.navx.reset();
				currentState++;
			}
			break;
		case 3: // SWEEPING
			if (gearTargetFound) {
				Robot.driveTrain.leftDriveControl(0);
				Robot.driveTrain.rightDriveControl(0);
				currentState++;
			} else {
				// if (RobotMap.navx.getYaw() > 30 || RobotMap.navx.getYaw() <
				// -30) {
				// if (turnLeft)
				// turnLeft = false;
				// else
				// turnLeft = true;
				// }

				if (turnLeft) {
					Robot.driveTrain.leftDriveControl(AUTO_TURN_SPEED);
					Robot.driveTrain.rightDriveControl(-AUTO_TURN_SPEED);
				} else {
					Robot.driveTrain.leftDriveControl(-AUTO_TURN_SPEED);
					Robot.driveTrain.rightDriveControl(AUTO_TURN_SPEED);
				}
				if (RobotMap.navx.getYaw() > 30 || RobotMap.navx.getYaw() < -30) {
					if (turnLeft) {
						turnLeft = false;
					} else {
						turnLeft = true;
					}
				}

			}
			break;
		case 4: // AUTO_GEAR
			// Command autoGear = new RunAutoGear();
			// Scheduler.getInstance().add(autoGear);
			// currentState++;
			break;
		case 5:
			// Do nothing. RunAutoGear will handle the rest.
			break;
		}
	}

	private void driveForward() {
		double percentError = RobotMap.navx.getYaw();
		double leftSpeed = AUTO_DRIVE_SPEED + percentError;
		double rightSpeed = AUTO_DRIVE_SPEED - percentError;
		Robot.driveTrain.leftDriveControl(leftSpeed);
		Robot.driveTrain.rightDriveControl(-rightSpeed);
	}

	private void driveBackwards() {
		Robot.driveTrain.leftDriveControl(AUTO_DRIVE_SPEED);
		Robot.driveTrain.rightDriveControl(AUTO_DRIVE_SPEED);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return isFinished;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
