// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.commands;

import org.opencv.core.Mat;
import org.usfirst.frc.team1701.robot.Robot;
import org.usfirst.frc.team1701.robot.subsystems.Vision;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 *
 */
public class See extends Command {
	GripPipelineWithEdits grip;
	Mat frame;
	NetworkTable vision;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public See() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.vision);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	public void setupNetworktable() {
		try {
//			NetworkTable.setClientMode();
//			NetworkTable.setIPAddress("roboRIO-1701-FRC.local");
			vision = NetworkTable.getTable("vision");
		} catch (Exception e) {
			System.out.println("Exception caught while setting up NetworkTable in See.");
			System.out.println(e.getMessage());
		}
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		// Vision.server.startAutomaticCapture();
//		Vision.server.startAutomaticCapture().setResolution(480, 360);
		grip = new GripPipelineWithEdits();
		frame = new Mat();// a new Mat to be processed
		setupNetworktable();

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		Vision.camera.grab(); // grabs the latest frame from the camera
		Vision.camera.read(frame); // writes that frame as the Mat frame
//		System.out.println(frame.size());
		grip.process(frame); // processes the frame
//		try {
//			if (vision.getBoolean("gearTargetFound", false))
//				System.out.println("Gear Vision Target Found!");
//			else {
//				System.out.println("Gear Vision Target Not Found.");
//				vision.initialize();
//			}
//		} catch (Exception e) {
//			System.out.println("Exception caught trying to get gearTargetFound.");
//			System.out.println(e);
//			System.out.println(vision);
//		}
		if(Robot.vision.gearTargetFound){
			System.out.println("Gear Target Found!");
			System.out.println("GearTarget X = " + Robot.vision.gearTargetX);
			System.out.println("Gear Target Y = " + Robot.vision.gearTargetY);
		}
		System.out.println();
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
