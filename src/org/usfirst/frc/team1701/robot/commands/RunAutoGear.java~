// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.commands;

import org.usfirst.frc.team1701.robot.Robot;
import org.usfirst.frc.team1701.robot.RobotMap;

import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 *
 */
public class RunAutoGear extends Command {
	private NetworkTable visionTable;
	private boolean gearTargetFound;
	private boolean gearTargetLinedUp;
	private boolean passesHWTest;
	private double gearTargetX;
	private double gearTargetHWError;
	private double oldHWError;
	private boolean finished;

	private int currentState;
	private double distanceToCorrect = 0;
	private double degreesToTurn;
	private boolean turnLeft = true;
	private final double TURN_SPEED = .3;
	private final double DRIVE_SPEED = .7;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public RunAutoGear() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.vision);
		requires(Robot.gearArm);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		NetworkTable.setTeam(1701);
		visionTable = NetworkTable.getTable("vision");
		finished = false;
		currentState = 1;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		try {
			gearTargetFound = visionTable.getBoolean("gearTargetFound", false);
			gearTargetLinedUp = visionTable.getBoolean("gearTargetLinedUp", false);
			passesHWTest = visionTable.getBoolean("passesHWTest", false);
			gearTargetX = visionTable.getNumber("gearTargetX", -1);
			gearTargetHWError = visionTable.getNumber("gearTargetHWError", 0);
		} catch (Exception e) {
			;
		}
		// Gets the latest, most correct information from the network table
		if (gearTargetFound) {
			if (RobotMap.lightsLED2.get() == Relay.Value.kReverse) {
				RobotMap.lightsLED2.set(Relay.Value.kOn);
			} else {
				RobotMap.lightsLED2.set(Relay.Value.kForward);
			}
		}

		switch (currentState) {
		// different actions depending on the state the gear placement is in
		case 0: // DONE
			finished = true;
			break;
		case 1: // SEARCHING
			if (gearTargetFound) {
				/*
				 * if the vision code recognizes a valid gear target either it
				 * sees a pair of two rectangles that fulfill criteria or just
				 * one rectangle. cannot reliably test if the singular rectangle
				 * is valid, so if there is only one it will automagically
				 * register as valid
				 */
				if (gearTargetLinedUp) {
					/*
					 * if the rightmost end of the rightmost rectangle is in the
					 * center of the robot's vision. this is what it should be
					 * like to put the gear on. if there is only one rectangle,
					 * it uses that rectangle's right side
					 */
					currentState++;
				} else if (passesHWTest) {
					double distanceToWall = Robot.gearArm.getGearDistance(); // in
																				// inches
					double degreesOff = .09375 * (gearTargetX - 320);
					distanceToCorrect = distanceToWall * Math.tan(degreesOff); // in
																				// inches
					RobotMap.navx.reset();
					degreesToTurn = 90;
					currentState = 4;
				} else {
					if (gearTargetHWError < oldHWError) {
						/*
						 * If this is more accurate than before, keep turning in
						 * the same direction as before, at a speed proportional
						 * to the percent error of the H:W test
						 */
						turn(gearTargetHWError / 100);
					} else if (gearTargetHWError > oldHWError) {
						/*
						 * If this is less accurate than before, turn in the
						 * opposite direction as of before, at a speed
						 * proportional to the percent error of the H:W test
						 */
						if (turnLeft)
							turnLeft = false;
						else
							turnLeft = true;
						turn(gearTargetHWError / 100);
					} else {
						/*
						 * If this is just as accurate as before, turn in the
						 * opposite direction as of before, at a speed
						 * proportional to half the percent error of the H:W
						 * test
						 */
						if (turnLeft)
							turnLeft = false;
						else
							turnLeft = true;
						turn(.5 * gearTargetHWError / 100);
					}
				}
			}
			break;
		case 2: // LOCKED-ON
			double distance = 5;
			if (Robot.gearArm.getGearDistance() > distance) {
				Robot.driveTrain.leftDriveControl(DRIVE_SPEED);
				Robot.driveTrain.rightDriveControl(DRIVE_SPEED);
			} else {
				currentState++;
			}
			break;
		case 3: // PLACING
			// Robot.gearAzrm.pushGear();
			currentState = 0;
			break;
		case 4: // REVERSE 1
			currentState++;
			// reversing away from the wall if necessary
			// currently does not reverse at all
			break;
		case 5: // TURN 1
			/*
			 * if (degreesToTurn > Math.abs(RobotMap.navx.getYaw())) { if
			 * (distanceToCorrect > 0) turnLeft = true; else turnLeft = false;
			 * turn(TURN_SPEED); } else {
			 * Robot.driveTrain.getLeftEncoder().reset();
			 * Robot.driveTrain.getRightEncoder().reset(); currentState++; }
			 */
			break;
		case 6: // REVERSE 2
			if (Robot.driveTrain.getLeftDistance() < distanceToCorrect
					|| Robot.driveTrain.getRightDistance() < distanceToCorrect) {
				Robot.driveTrain.leftDriveControl(-DRIVE_SPEED);
				Robot.driveTrain.rightDriveControl(-DRIVE_SPEED);
			} else {
				RobotMap.navx.reset();
				degreesToTurn = 90;
				currentState++;
			}
			break;
		case 7: // TURN 2
			/*
			 * if (degreesToTurn > Math.abs(RobotMap.navx.getYaw())) { if
			 * (distanceToCorrect > 0) turnLeft = false; else turnLeft = true;
			 * turn(TURN_SPEED); } else { currentState = 1; }
			 */
			break;
		}

		oldHWError = gearTargetHWError;
		// updates the oldHWError, so that it is correct for the next loop

		/*
		 * NOTES: - currently turns and reverses at a constant speed, could make
		 * the robot inaccurate - can be fixed by slowing when nearing desired
		 * position
		 */
	}// execute()

	private void turn(double speed) {
		if (turnLeft) {
			Robot.driveTrain.leftDriveControl(speed);
			Robot.driveTrain.rightDriveControl(-speed);
		} else {
			Robot.driveTrain.leftDriveControl(-speed);
			Robot.driveTrain.rightDriveControl(speed);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return finished;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
