package org.usfirst.frc.team1701.robot.commands;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.vision.VisionPipeline;

/**
 * GripPipelin class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipelineWithEdits implements VisionPipeline {

	// Outputs
	private Mat blurOutput = new Mat();
	private Mat rgbThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private NetworkTable vision;

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	@Override
	public void process(Mat source0) {
		System.out.println("Starting processing...");

		setupNetworktable();
		// System.out.println("Starting Blur...");

		// Step Blur0:
		Mat blurInput = source0;
		BlurType blurType = BlurType.get("Gaussian Blur");
		double blurRadius = 1.8018018018018018;
		blur(blurInput, blurType, blurRadius, blurOutput);

		// System.out.println("Blur applied.");
		// System.out.println("Starting RGBThreshold...");

		// Step RGB_Threshold0:
		Mat rgbThresholdInput = blurOutput;
		double[] rgbThresholdRed = { 121.08812949640286, 197.0454545454545 };
		double[] rgbThresholdGreen = { 215.18884892086334, 255.0 };
		double[] rgbThresholdBlue = { 198.48920863309354, 255.0 };
		rgbThreshold(rgbThresholdInput, rgbThresholdRed, rgbThresholdGreen, rgbThresholdBlue, rgbThresholdOutput);

		// System.out.println("RGBThreshold applied.");
		// System.out.println("Starting Find_Contours...");

		// Step Find_Contours0:
		Mat findContoursInput = rgbThresholdOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// System.out.println("Find_Contours applied.");
		// System.out.println("Starting Convex_Hulls...");

		// Step Convex_Hulls0:
		ArrayList<MatOfPoint> convexHullsContours = findContoursOutput;
		convexHulls(convexHullsContours, convexHullsOutput);

		// System.out.println("Convex_Hulls applied.");
		// System.out.println("Starting Filter_Contours...");

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = convexHullsOutput;
		double filterContoursMinArea = 20.0;
		double filterContoursMinPerimeter = 0.0;
		double filterContoursMinWidth = 0.0;
		double filterContoursMaxWidth = 150.0;
		double filterContoursMinHeight = 0.0;
		double filterContoursMaxHeight = 220.0;
		double[] filterContoursSolidity = { 100.0, 100.0 };
		double filterContoursMaxVertices = 25.0;
		double filterContoursMinVertices = 4.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 100.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter,
				filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight,
				filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio,
				filterContoursMaxRatio, filterContoursOutput);

		// System.out.println("Filter_Contours applied.");

		// end GRIP autogenerated
		List<MatOfPoint> possibleRect = new ArrayList<MatOfPoint>();
		List<MatOfPoint> possibleGoal = new ArrayList<MatOfPoint>();
		System.out.println("filterContoursOutput size: " + filterContoursOutput.size());
		// put
		processContours(filterContoursOutput, possibleRect, possibleGoal);

		/*
		 * processing for rectangles (gear vision) ----- loop 0 thru n-2 create
		 * boundingRect for i test for proportion loop i+1 thru n-1 create
		 * boundingRect for second one find widths of each compare to find
		 * similar widths find which is left/which is right calculate distance
		 * between the right side of left rect and left side of right rect
		 * compare distance and width to desired ratio (6.25:2) if there is a
		 * match, calculate score (how good a fit) set gearTargetFound = true if
		 * its a better score than previous match, record its data: centerX,
		 * centerY, score
		 */
		double toleranceDW = 2.3, toleranceHW = .5, toleranceWW = .2, score = 0, rightRectSide = -1, toleranceM = 10,
				newPercentError = 0;
		boolean gearTargetLinedUp = false, passesHWTest = false, gearTargetFound = false;
		int resolutionX = 640;

		System.out.println("Starting gear vision...");
		System.out.println("possibleRect size: " + possibleRect.size());
		if (possibleRect.size() > 1) {
			for (int i = 0; i < possibleRect.size() - 1; i++) {

				Rect rect1 = Imgproc.boundingRect(possibleRect.get(i));
				// creates a bounding rect around the first contour
				System.out.println("Creating boundingRect rect1...");

				for (int j = i + 1; j < possibleRect.size(); j++) {
					// compares the first to every contour past it

					Rect rect2 = Imgproc.boundingRect(possibleRect.get(j));
					// bounding rect around the second contour
					System.out.println("Creating boundingRect rect2...");

					if (rect1.width >= (1 - (.5 * toleranceWW)) * rect2.width
							&& rect1.width <= (1 + (.5 * toleranceWW)) * rect2.width) {
						// trying to get equal widths, tolerance =
						// toleranceWW
						System.out.println("The two rects pass the w:w test.");

						double distance;
						double width = (rect1.width + rect2.width) / 2;

						if (rect1.x <= rect2.x) { // If Rect 1 is to the
													// left
							distance = rect2.x - (rect1.x + rect1.width);
							System.out.println("rect1 is to the left.");
						} else { // if rect1 is to the right
							distance = rect1.x - (rect2.x + rect2.width);
							System.out.println("rect2 is to the left.");
						}

						if (distance >= width * (3.125 - (.5 * toleranceDW))
								&& distance <= width * (3.125 + (.5 * toleranceDW))) {
							// compare ratio of distance between to width
							// trying to get a 3.125:1 ratio, tolerance =
							// toleranceDW
							System.out.println("The two rects pass the d:w test.");

							double rect1Score = Math.abs(((rect1.height / rect1.width) - 2.5) / 2.5) * 100;
							// rect1's width to height ratio
							double rect2Score = Math.abs(((rect2.height / rect2.width) - 2.5) / 2.5) * 100;
							// rect2's width to height ratio
							double separationScore = Math.abs(((distance / width) - 3.125) / 3.125) * 100;
							/*
							 * the ratio of the separation between the targets
							 * to their widths
							 */
							double widthScore = Math.abs(((rect1.width / rect2.width) - 1) / 1) * 100;
							// the similarity of the two targets' widths

							double newScore = 100 - .25 * (rect1Score + rect2Score + separationScore + widthScore);
							/*
							 * each category counts for 1/4 of the score, which
							 * is subtracted from 100%
							 */
							if (newScore > score && newScore >= 50) {
								gearTargetFound = true;
								score = newScore;

								if (rect1.x > rect2.x) {
									rightRectSide = rect1.x + rect1.width;

									if (rect1.height <= (2.5 + (.5 * toleranceHW)) * rect1.width
											&& rect1.height >= (2.5 - (.5 * toleranceHW)) * rect1.width) {
										// trying for 2.5:1 ratio, tolerance =
										// toleranceHW
										System.out.println("The rect passes the h:w ratio test.");
										passesHWTest = true;
										newPercentError = Math.abs(((rect1.height / rect1.width) - 2.5) / 2.5) * 100;
									} // elif(passes h:w test)

								} else {
									rightRectSide = rect2.x + rect2.width;

									if (rect2.height <= (2.5 + (.5 * toleranceHW)) * rect2.width
											&& rect2.height >= (2.5 - (.5 * toleranceHW)) * rect2.width) {
										// trying for 2.5:1 ratio, tolerance =
										// toleranceHW
										System.out.println("The rect passes the h:w ratio test.");
										passesHWTest = true;
										newPercentError = Math.abs(((rect2.height / rect2.width) - 2.5) / 2.5) * 100;
									} // elif(passes h:w test)
								}

								System.out.println(
										"These two rects are better than the last! ----------------------------------");
								System.out.println("Gear Target Score: " + score);
							} // if(better score)
							else
								System.out.println(
										"The two rects are lower in score than the previous ones, or the two rects were too low in score.");
						} // if()
						else
							System.out.println("The two rects fail the d:w test.");
					} // if(widths)
					else
						System.out.println("The two rects fail the w:w test.");
				} // for(j)
			} // for(i)

		} else if (possibleRect.size() == 1) {
			Rect rect = Imgproc.boundingRect(possibleRect.get(0));
			// creates a boundingRect around the possibleRect

			rightRectSide = rect.x + rect.width;

			if (rect.height <= (2.5 + (.5 * toleranceHW)) * rect.width
					&& rect.height >= (2.5 - (.5 * toleranceHW)) * rect.width) {
				// trying for 2.5:1 ratio, tolerance = toleranceHW
				System.out.println("The rect passes the h:w ratio test.");
				passesHWTest = true;
			} // if(passes h:w test)

			newPercentError = Math.abs(((rect.height / rect.width) - 2.5) / 2.5) * 100;
			gearTargetFound = true;
			// we're assuming that the possibleRect we're seeing is the target
			
		} // elif(possibleRect.size == 1)

		if (gearTargetFound) {
			if (rightRectSide >= (.5 * resolutionX) - (.5 * toleranceM)
					&& rightRectSide <= (.5 * resolutionX) + (.5 * toleranceM)) {
				gearTargetLinedUp = true;
			}
		}
		
		
		// write to network table
		try {
			vision.putBoolean("gearTargetFound", gearTargetFound);
			vision.putNumber("gearTargetX", rightRectSide);
			vision.putBoolean("gearPassesHWTest", passesHWTest);
			vision.putNumber("gearTargetHWError", newPercentError);
			vision.putBoolean("gearTargetLinedUp", gearTargetLinedUp);
			// vision.putBoolean("goalTargetFound", true);
			// vision.putNumber("goalTargetX", 50);
			// vision.putNumber("goalTargetY", 50);
		} catch (Exception e) {
			;
		}
	}

	public void setupNetworktable() {
		try {
			NetworkTable.setClientMode();
			NetworkTable.setIPAddress("roboRIO-1701-FRC.local");
			vision = NetworkTable.getTable("vision");
		} catch (Exception e) {
			;
		}
	}

	public void processContours(ArrayList<MatOfPoint> contours, List<MatOfPoint> possibleRect,
			List<MatOfPoint> possibleGoal) {

		// System.out.println("Starting processContours...");

		double precision = 0.005;
		for (MatOfPoint mOP : contours) {
			// approximate the shapes so that they have less
			// sides
			MatOfPoint2f approxCurve = new MatOfPoint2f();
			Imgproc.approxPolyDP(new MatOfPoint2f(mOP.toArray()), approxCurve,
					precision * Imgproc.arcLength(new MatOfPoint2f(mOP.toArray()), true), true);
			MatOfPoint approxCurveMOP = new MatOfPoint();
			approxCurve.convertTo(approxCurveMOP, CvType.CV_32S);

			if (isRectangle(approxCurveMOP)) {
				possibleRect.add(approxCurveMOP);
			} else if (isGoal(approxCurveMOP)) {
				possibleGoal.add(approxCurveMOP);
			}
		} // for()
			// System.out.println("Contours filtered.");
		System.out.println("Number of potential goal lines: " + possibleGoal.size());

	}// MatOfPoint()

	public boolean isRectangle(MatOfPoint mOP) {
		if (/*
			 * Imgproc.contourArea(mOP) > 1000 && Imgproc.isContourConvex(new
			 * MatOfPoint(mOP.toArray()))
			 * ---------------------------------------- &&
			 */ mOP.toArray().length >= 4 && mOP.toArray().length <= 8) {
			return true;
		}
		return false;
	}

	public boolean isGoal(MatOfPoint mOP) {
		if (Imgproc.contourArea(mOP) > 1200 && Imgproc.isContourConvex(new MatOfPoint(mOP.toArray()))
				&& mOP.toArray().length >= 6 && mOP.toArray().length <= 20) {
			return true;
		}
		return false;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * 
	 * @return Mat output from Blur.
	 */
	public Mat blurOutput() {
		return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a RGB_Threshold.
	 * 
	 * @return Mat output from RGB_Threshold.
	 */
	public Mat rgbThresholdOutput() {
		return rgbThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Convex_Hulls.
	 * 
	 * @return ArrayList<MatOfPoint> output from Convex_Hulls.
	 */
	public ArrayList<MatOfPoint> convexHullsOutput() {
		return convexHullsOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	/**
	 * An indication of which type of filter to use for a blur. Choices are BOX,
	 * GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType {
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			} else if (GAUSSIAN.label.equals(type)) {
				return GAUSSIAN;
			} else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			} else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * 
	 * @param input
	 *            The image on which to perform the blur.
	 * @param type
	 *            The blurType to perform.
	 * @param doubleRadius
	 *            The radius for the blur.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius, Mat output) {
		int radius = (int) (doubleRadius + 0.5);
		int kernelSize;
		switch (type) {
		case BOX:
			kernelSize = 2 * radius + 1;
			Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
			break;
		case GAUSSIAN:
			kernelSize = 6 * radius + 1;
			Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
			break;
		case MEDIAN:
			kernelSize = 2 * radius + 1;
			Imgproc.medianBlur(input, output, kernelSize);
			break;
		case BILATERAL:
			Imgproc.bilateralFilter(input, output, -1, radius, radius);
			break;
		}
	}

	/**
	 * Segment an image based on color ranges.
	 * 
	 * @param input
	 *            The image on which to perform the RGB threshold.
	 * @param red
	 *            The min and max red.
	 * @param green
	 *            The min and max green.
	 * @param blue
	 *            The min and max blue.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void rgbThreshold(Mat input, double[] red, double[] green, double[] blue, Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2RGB);
		Core.inRange(out, new Scalar(red[0], green[0], blue[0]), new Scalar(red[1], green[1], blue[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the
	 * nearest black pixel.
	 * 
	 * @param input
	 *            The image on which to perform the Distance Transform.
	 * @param type
	 *            The Transform.
	 * @param maskSize
	 *            the size of the mask.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		} else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}

	/**
	 * Compute the convex hulls of contours.
	 * 
	 * @param inputContours
	 *            The contours on which to perform the operation.
	 * @param outputContours
	 *            The contours where the output will be stored.
	 */
	private void convexHulls(List<MatOfPoint> inputContours, ArrayList<MatOfPoint> outputContours) {
		final MatOfInt hull = new MatOfInt();
		outputContours.clear();
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final MatOfPoint mopHull = new MatOfPoint();
			Imgproc.convexHull(contour, hull);
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			outputContours.add(mopHull);
		}
	}

	/**
	 * Filters out contours that do not meet certain criteria.
	 * 
	 * @param inputContours
	 *            is the input list of contours
	 * @param output
	 *            is the the output list of contours
	 * @param minArea
	 *            is the minimum area of a contour that will be kept
	 * @param minPerimeter
	 *            is the minimum perimeter of a contour that will be kept
	 * @param minWidth
	 *            minimum width of a contour
	 * @param maxWidth
	 *            maximum width
	 * @param minHeight
	 *            minimum height
	 * @param maxHeight
	 *            maximimum height
	 * @param Solidity
	 *            the minimum and maximum solidity of a contour
	 * @param minVertexCount
	 *            minimum vertex Count of the contours
	 * @param maxVertexCount
	 *            maximum vertex Count
	 * @param minRatio
	 *            minimum ratio of width to height
	 * @param maxRatio
	 *            maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea, double minPerimeter, double minWidth,
			double maxWidth, double minHeight, double maxHeight, double[] solidity, double maxVertexCount,
			double minVertexCount, double minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		// operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth)
				continue;
			if (bb.height < minHeight || bb.height > maxHeight)
				continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea)
				continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
				continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1])
				continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)
				continue;
			final double ratio = bb.width / (double) bb.height;
			if (ratio < minRatio || ratio > maxRatio)
				continue;
			output.add(contour);
		}
	}

}
