// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot;

import org.usfirst.frc.team1701.robot.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	//// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton reverseToggleButton;
    public Joystick drive_FB;
    public Joystick drive_T;
    public JoystickButton autoShoot;
    public JoystickButton autoGear;
    public JoystickButton overrideGear;
    public JoystickButton overrideShot;
    public JoystickButton climbOn;
    public JoystickButton climbOff;
    public JoystickButton intakeOn;
    public JoystickButton intakeOff;
    public JoystickButton intakeReverse;
    public JoystickButton targetLightOn;
    public JoystickButton targetLightOff;
    public JoystickButton revHopper;
    public JoystickButton idleHopper;
    public JoystickButton forwardHopper;
    public Joystick operation;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operation = new Joystick(2);
        
        forwardHopper = new JoystickButton(operation, 7);
        forwardHopper.whileHeld(new HopperForward());
        idleHopper = new JoystickButton(operation, 6);
        idleHopper.whileHeld(new HopperIdle());
        revHopper = new JoystickButton(operation, 5);
        revHopper.whileHeld(new HopperRev());
        targetLightOff = new JoystickButton(operation, 15);
        targetLightOff.whenPressed(new StopTargetLight());
        targetLightOn = new JoystickButton(operation, 15);
        targetLightOn.whenPressed(new RunTargetLight());
        intakeReverse = new JoystickButton(operation, 1);
        intakeReverse.whileHeld(new RunIntakeReverse());
        intakeOff = new JoystickButton(operation, 4);
        intakeOff.whenPressed(new StopIntake());
        intakeOn = new JoystickButton(operation, 2);
        intakeOn.whileHeld(new RunIntake());
        climbOff = new JoystickButton(operation, 11);
        climbOff.whenPressed(new StopClimb());
        climbOn = new JoystickButton(operation, 10);
        climbOn.whenPressed(new RunClimb());
        overrideShot = new JoystickButton(operation, 9);
        overrideShot.whileHeld(new OverrideHighShot());
        overrideGear = new JoystickButton(operation, 15);
        overrideGear.whenPressed(new RunGearArm());
        autoGear = new JoystickButton(operation, 15);
        autoGear.whenPressed(new RunAutoGear());
        autoShoot = new JoystickButton(operation, 15);
        autoShoot.whileHeld(new RunAutoShoot());
        drive_T = new Joystick(1);
        
        drive_FB = new Joystick(0);
        
        reverseToggleButton = new JoystickButton(drive_FB, 1);
        reverseToggleButton.whenPressed(new ToggleReverse());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("TeleopDrive", new TeleopDrive());
        SmartDashboard.putData("RunAutoShoot", new RunAutoShoot());
        SmartDashboard.putData("OverrideHighShot", new OverrideHighShot());
        SmartDashboard.putData("RunIntake", new RunIntake());
        SmartDashboard.putData("RunIntakeReverse", new RunIntakeReverse());
        SmartDashboard.putData("StopIntake", new StopIntake());
        SmartDashboard.putData("RunGearArm", new RunGearArm());
        SmartDashboard.putData("RunAutoGear", new RunAutoGear());
        SmartDashboard.putData("RunClimb", new RunClimb());
        SmartDashboard.putData("StopClimb", new StopClimb());
        SmartDashboard.putData("RunTargetLight", new RunTargetLight());
        SmartDashboard.putData("StopTargetLight", new StopTargetLight());
        SmartDashboard.putData("MaintainPressure", new MaintainPressure());
        SmartDashboard.putData("StopHighShooter", new StopHighShooter());
        SmartDashboard.putData("ToggleReverse", new ToggleReverse());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDrive_FB() {
        return drive_FB;
    }

    public Joystick getDrive_T() {
        return drive_T;
    }

    public Joystick getOperation() {
        return operation;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
